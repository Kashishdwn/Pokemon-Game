{"version":3,"sources":["Pokecard.js","Pokedex.js","Pokegame.js","App.js","serviceWorker.js","index.js"],"names":["Pokecard","number","props","this","imgSrc","id","slice","className","name","src","alt","type","exp","React","Component","Pokedex","title","isWinner","pokemon","map","p","base_experience","Pokegame","hand1","hand2","length","randomId","Math","floor","random","randomPokemon","splice","push","exp1","reduce","exp2","console","log","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mUAqBeA,G,6KAdP,IAHQC,EAGFC,EAAMC,KAAKD,MACbE,EAAO,GAAD,OALD,8DAKC,QAJFH,EAI4BC,EAAMG,KAJd,IAAM,YAAKJ,GAASK,OAAO,GAAIL,EAIjD,QACV,OACI,yBAAKM,UAAU,YACX,wBAAIA,UAAU,kBAAkBL,EAAMM,MACtC,yBAAKD,UAAU,gBACX,yBAAKE,IAAKL,EAAQM,IAAI,gBAE1B,yBAAKH,UAAU,iBAAf,SAAsCL,EAAMS,MAC5C,yBAAKJ,UAAU,iBAAf,QAAqCL,EAAMU,U,GAXpCC,IAAMC,YCmBdC,G,6KAnBP,IAAIC,EAOJ,OALIA,EADDb,KAAKD,MAAMe,SACJ,wBAAIV,UAAU,kBAAd,gBAGA,wBAAIA,UAAU,iBAAd,eAGN,yBAAKA,UAAU,WACVS,EACD,gDAAsBb,KAAKD,MAAMU,KACjC,yBAAKL,UAAU,iBACVJ,KAAKD,MAAMgB,QAAQC,KAAI,SAACC,GAAD,OACpB,kBAAC,EAAD,CAAUf,GAAIe,EAAEf,GAAIG,KAAMY,EAAEZ,KAAMG,KAAMS,EAAET,KAAMC,IAAKQ,EAAEC,2B,GAfzDR,IAAMC,YCAtBQ,G,6KAgBE,IAFA,IAAIC,EAAM,GACNC,EAAM,YAAIrB,KAAKD,MAAMgB,SACnBK,EAAME,OAAOD,EAAMC,QAAO,CAC5B,IAAIC,EAASC,KAAKC,MAAMD,KAAKE,SAASL,EAAMC,QACxCK,EAAcN,EAAMO,OAAOL,EAAS,GAAG,GAC3CH,EAAMS,KAAKF,GAEf,IAAIG,EAAKV,EAAMW,QAAO,SAACtB,EAAIM,GAAL,OAAeN,EAAIM,EAAQG,kBAAgB,GAC7Dc,EAAKX,EAAMU,QAAO,SAACtB,EAAIM,GAAL,OAAeN,EAAIM,EAAQG,kBAAgB,GAGjE,OAFAe,QAAQC,IAAId,GACZa,QAAQC,IAAIb,GAER,6BACI,kBAAC,EAAD,CAASN,QAASK,EAAOX,IAAKqB,EAAMhB,SAAUgB,EAAKE,IACnD,kBAAC,EAAD,CAASjB,QAASM,EAAOZ,IAAKuB,EAAMlB,SAAUgB,EAAKE,S,GA5B5CtB,IAAMC,YAAvBQ,EACKgB,aAAa,CAChBpB,QAAS,CACL,CAACb,GAAI,EAAGG,KAAM,aAAcG,KAAM,OAAQU,gBAAiB,IAC3D,CAAChB,GAAI,EAAGG,KAAM,WAAYG,KAAM,QAASU,gBAAiB,IAC1D,CAAChB,GAAI,GAAIG,KAAM,UAAWG,KAAM,MAAOU,gBAAiB,IACxD,CAAChB,GAAI,GAAIG,KAAM,aAAcG,KAAM,SAAUU,gBAAiB,KAC9D,CAAChB,GAAI,GAAIG,KAAM,UAAWG,KAAM,WAAYU,gBAAiB,KAC7D,CAAChB,GAAI,GAAIG,KAAM,aAAcG,KAAM,SAAUU,gBAAiB,IAC9D,CAAChB,GAAI,GAAIG,KAAM,SAAUG,KAAM,SAAUU,gBAAiB,KAC1D,CAAChB,GAAI,IAAKG,KAAM,QAASG,KAAM,SAAUU,gBAAiB,MAuBvDC,QCzBAiB,MARf,WACE,OACE,yBAAKhC,UAAU,OACb,kBAAC,EAAD,QCMciC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.bf0933e3.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Pokecard.css';\r\n//const POKE_API=\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/\";\r\nconst POKE_API = 'https://assets.pokemon.com/assets/cms2/img/pokedex/detail/';\r\nlet padToThree=(number)=> (number <=999 ? `00${number}`.slice(-3): number);\r\nclass Pokecard extends React.Component{\r\n    render(){\r\n        const props=this.props;\r\n        let imgSrc=`${POKE_API}${padToThree(props.id)}.png`;\r\n        return(\r\n            <div className=\"Pokecard\">\r\n                <h1 className=\"Pokecard-title\">{props.name}</h1>\r\n                <div className=\"Pokecard-img\">\r\n                    <img src={imgSrc} alt=\"props.name\"/>\r\n                </div>\r\n                <div className=\"Pokecard-data\">TYPE: {props.type}</div>\r\n                <div className=\"Pokecard-data\">EXP: {props.exp}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Pokecard;","import React from 'react';\r\nimport Pokecard from './Pokecard';\r\nimport './Pokedex.css';\r\nclass Pokedex extends React.Component{\r\n    render(){\r\n        let title;\r\n        if(this.props.isWinner){\r\n            title=<h1 className=\"Pokedex-Winner\">Winning Hand</h1>\r\n        }\r\n        else{\r\n            title=<h1 className=\"Pokedex-Loser\">Losing Hand</h1>\r\n        }\r\n        return(\r\n            <div className=\"Pokedex\">\r\n                {title} \r\n                <h4>Total Experience:{this.props.exp}</h4>\r\n                <div className=\"Pokedex-cards\">\r\n                    {this.props.pokemon.map((p) => (\r\n                        <Pokecard id={p.id} name={p.name} type={p.type} exp={p.base_experience}/>))}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Pokedex;","import React from 'react';\r\nimport Pokedex from './Pokedex';\r\nimport './Pokegame.css';\r\nclass Pokegame extends React.Component{\r\n    static defaultProps={\r\n        pokemon: [\r\n            {id: 4, name: 'Charmander', type: 'fire', base_experience: 62},\r\n            {id: 7, name: 'Squirtle', type: 'water', base_experience: 63},\r\n            {id: 11, name: 'Metapod', type: 'bug', base_experience: 72},\r\n            {id: 12, name: 'Butterfree', type: 'flying', base_experience: 178},\r\n            {id: 25, name: 'Pikachu', type: 'electric', base_experience: 112},\r\n            {id: 39, name: 'Jigglypuff', type: 'normal', base_experience: 95},\r\n            {id: 94, name: 'Gengar', type: 'poison', base_experience: 225},\r\n            {id: 133, name: 'Eevee', type: 'normal', base_experience: 65}\r\n          ]\r\n    }\r\n    render(){\r\n        let hand1=[];\r\n        let hand2=[...this.props.pokemon];\r\n        while(hand1.length<hand2.length){\r\n            let randomId=Math.floor(Math.random()*hand2.length);\r\n            let randomPokemon=hand2.splice(randomId,1)[0];\r\n            hand1.push(randomPokemon);\r\n        }\r\n        let exp1=hand1.reduce((exp,pokemon)=>exp+pokemon.base_experience,0);\r\n        let exp2=hand2.reduce((exp,pokemon)=>exp+pokemon.base_experience,0);\r\n        console.log(hand1);\r\n        console.log(hand2);\r\n        return(\r\n            <div>\r\n                <Pokedex pokemon={hand1} exp={exp1} isWinner={exp1>exp2}/>\r\n                <Pokedex pokemon={hand2} exp={exp2} isWinner={exp1<exp2}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Pokegame;\r\n","import React from 'react'; \nimport './App.css';\nimport Pokegame from './Pokegame';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Pokegame/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}